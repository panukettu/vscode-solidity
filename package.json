{
  "name": "vsc-solidity",
  "description": "Solidity extension with improved support for file level patterns, forked from juanfranblanco/vscode-solidity",
  "keywords": [
    "solidity",
    "ethereum",
    "blockchain",
    "compiler",
    "diamond",
    "solhint"
  ],
  "version": "0.7.6",
  "publisher": "0xp",
  "license": "MIT",
  "engines": {
    "vscode": "^1.77.0"
  },
  "files": [
    "/out"
  ],
  "contributors": [
    "Juan Blanco",
    "panukettu"
  ],
  "bugs": {
    "url": "https://github.com/panukettu/vscode-solidity/issues"
  },
  "icon": "images/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/panukettu/vscode-solidity"
  },
  "categories": [
    "Programming Languages",
    "Snippets"
  ],
  "main": "./out/src/extension.js",
  "bin": {
    "vscode-solidity-server": "./out/src/server.js"
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "package": "vsce package",
    "prepublishOnly": "npm run compile",
    "build:cli": "tsup src/server.ts -d dist/cli && sh scripts/add_shebang.sh dist/cli/server.js",
    "compile": "tsup",
    "compile:es": "npm run esbuild",
    "compile:tsc": "tsc -p ./",
    "watch": "tsup --watch",
    "watch:tsc": "tsc -watch -p ./",
    "test": "nyc --require ts-node/register --require source-map-support/register mocha test/**/*.spec.ts",
    "esbuild-base": "npx esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild-server": "npx esbuild ./src/server.ts --bundle --outfile=out/server.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base && npm run esbuild-server -- --sourcemap",
    "test-compile": "tsc -p ./"
  },
  "vsce": {
    "dependencies": false,
    "useYarn": false
  },
  "dependencies": {
    "@iarna/toml": "^2.2.5",
    "axios": "^1.4.0",
    "fast-equals": "^5.0.1",
    "fs-extra": "^4.0.3",
    "glob": "^8.1.0",
    "prettier": "^3.0.2",
    "prettier-plugin-solidity": "^1.1.3",
    "solc": "^0.8.19",
    "solhint": "^3.6.2",
    "solparse-exp-jb": "3.0.3",
    "viem": "^1.10.8",
    "vscode-languageclient": "^8.1.0",
    "vscode-languageserver": "^8.1.0",
    "vscode-languageserver-textdocument": "^1.0.8",
    "vscode-uri": "3.0.7",
    "yaml-js": "0.2.3"
  },
  "devDependencies": {
    "@enio.ai/data-ferret": "^2.0.1",
    "@types/glob": "^8.1.0",
    "@types/lodash.debounce": "^4.0.7",
    "@types/node": "^11.15.3",
    "@types/vscode": "^1.77.0",
    "@vscode/vsce": "^2.21.1",
    "class-utils": "^0.3.6",
    "esbuild": "0.19.2",
    "esbuild-plugin-copy": "^2.1.1",
    "lodash.unset": "^4.5.2",
    "obj-walker": "^1.7.0",
    "reftools": "^1.1.9",
    "safe-clone-deep": "^1.1.5",
    "ts-node": "^7.0.1",
    "ts-node-dev": "^2.0.0",
    "tslint": "^5.20.1",
    "tsup": "^7.2.0",
    "typescript": "^5.0.4",
    "what-is-circular": "^1.0.1"
  },
  "nyc": {
    "extension": [
      ".ts"
    ],
    "include": [
      "src/**/*.ts"
    ],
    "exclude": [
      "**/*.d.ts",
      "out",
      "dist"
    ],
    "all": true
  },
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Solidity configuration",
      "properties": {
        "solidity.initExclude": {
          "type": [
            "array"
          ],
          "default": [],
          "description": "Project source folders to exclude from the initial parsing, i.e: ['temp', 'test']"
        },
        "solidity.compilerPackage": {
          "type": "string",
          "default": "solc",
          "description": "The node modules package to find the solcjs compiler"
        },
        "solidity.compileUsingRemoteVersion": {
          "type": "string",
          "default": "latest",
          "description": "Configuration to download a 'remote' solc (js) version binary file from 'https://binaries.soliditylang.org/', for example: 'latest' will always use the latest version, or a specific version like: 'v0.4.3+commit.2353da71', use the command 'Solidity: Get solidity releases' to list all versions available, or just right click in a solidity file and select either `Solidity: Change global compiler version (Remote)` or `Solidity: Change workspace compiler version (Remote)` to use the wizard to set the correct version or setting for either the current workspace or globally"
        },
        "solidity.compilerOptimization": {
          "type": "number",
          "default": 200,
          "description": "Optimize for how many times you intend to run the code. Lower values will optimize more for initial deployment cost, higher values will optimize more for high-frequency usage."
        },
        "solidity.compileUsingLocalVersion": {
          "type": "string",
          "default": "",
          "description": "Compile using a local solc (js) binary file, please include the path of the file if wanted: 'C://v0.4.3+commit.2353da71.js'"
        },
        "solidity.defaultCompiler": {
          "type": "string",
          "description": "Sets the default compiler and compiler configuration to use. Remote will use the configured compiler using the setting 'compileUsingRemoteVersion' downloaded from https://binaries.soliditylang.org/', `localFile` will use the solc file in the location configured in the setting: `compileUsingLocalVersion`, `localNodeModule` will attempt to find the solc file in the node_modules folder / package configured on 'nodemodulespackage' and 'embedded' which will use the solc version packaged with the extension. The default is 'remote' which is configured as 'latest'",
          "enum": [
            "remote",
            "localFile",
            "localNodeModule",
            "embedded"
          ],
          "default": "remote"
        },
        "solidity.linter": {
          "type": "string",
          "enum": [
            "",
            "solhint"
          ],
          "default": "solhint",
          "description": "Enables linting using solhint."
        },
        "solidity.solhintRules": {
          "type": [
            "object"
          ],
          "default": null,
          "description": "Solhint validation rules"
        },
        "solidity.formatter": {
          "type": "string",
          "default": "prettier",
          "enum": [
            "none",
            "prettier",
            "forge"
          ],
          "description": "Enables / disables the solidity formatter prettier (default) or forge (note it needs to be installed)"
        },
        "solidity.enabledAsYouTypeCompilationErrorCheck": {
          "type": "boolean",
          "default": true,
          "description": "Enables as you type compilation of the document and error highlighting"
        },
        "solidity.validationDelay": {
          "type": "number",
          "default": 1500,
          "description": "Delay of validation trigger from changes in the current document (compilation)"
        },
        "solidity.libs": {
          "type": [
            "array"
          ],
          "default": [
            "node_modules",
            "lib"
          ],
          "description": "Directories to look for dependencies, eg. ['node_modules', 'lib']."
        },
        "solidity.monoRepoSupport": {
          "type": "boolean",
          "default": true,
          "description": "Enables mono repo support in the current workspace, a project folder will be signaled if a file is found on the current folder or above including: remappings.txt, truffle-config.js, brownie-config.yaml, foundry.toml, hardhat.config.js, dappfile"
        },
        "solidity.sources": {
          "type": "string",
          "default": "",
          "description": "Directory where to look for project files, i.e: 'src' or empty to use foundry/hardhat.config.js (NOT-ts) or finally, the root directory"
        },
        "solidity.libSources": {
          "type": [
            "array"
          ],
          "default": [
            "src",
            "contracts"
          ],
          "description": "Directories to look for solidity files within libs."
        },
        "solidity.remappings": {
          "type": "array",
          "default": [],
          "description": "Remappings to resolve contracts to local files / directories, i.e: [\"@openzeppelin/=lib/openzeppelin-contracts\",\"ds-test/=lib/ds-test/src/\"]"
        },
        "solidity.remappingsWindows": {
          "type": "array",
          "default": [],
          "description": "Windows Remappings to resolve contracts to local Windows files / directories (Note this overrides the generic remapping settings if the OS is Windows) , i.e: [\"@openzeppelin/=C:/lib/openzeppelin-contracts\",\"ds-test/=C:/lib/ds-test/src/\"]"
        },
        "solidity.remappingsUnix": {
          "type": "array",
          "default": [],
          "description": "Unix Remappings to resolve contracts to local Unix files / directories (Note this overrides the generic remapping settings if the OS is Unix based), i.e: [\"@openzeppelin/=/opt/lib/openzeppelin-contracts\",\"ds-test/=/opt/lib/ds-test/src/\"]"
        }
      }
    },
    "languages": [
      {
        "id": "solidity",
        "aliases": [
          "Solidity",
          "solidity"
        ],
        "extensions": [
          ".sol"
        ],
        "configuration": "./solidity.configuration.json"
      }
    ],
    "commands": [
      {
        "title": "Solidity: Preview Selector",
        "command": "solidity.lens.function.selector",
        "category": "solidity.codelens"
      },
      {
        "title": "Solidity: Preview Sig",
        "command": "solidity.lens.function.natspec",
        "category": "solidity.codelens"
      },
      {
        "title": "Solidity: Preview String Hash",
        "command": "solidity.lens.string.keccak256",
        "category": "solidity.codelens"
      },
      {
        "title": "Solidity: Enable CodeLens",
        "command": "solidity.enableCodeLens",
        "category": "solidity.codelens"
      },
      {
        "title": "Solidity: Disable Codelens",
        "command": "solidity.disableCodeLens",
        "category": "solidity.codelens"
      },
      {
        "command": "solidity.compile.active",
        "title": "Solidity: Compile Contract"
      },
      {
        "command": "solidity.compile.activeUsingRemote",
        "title": "Solidity: Compile with configured Remote version"
      },
      {
        "command": "solidity.compile.activeUsingLocalFile",
        "title": "Solidity: Compile with configured Local solc file"
      },
      {
        "command": "solidity.compile.activeUsingNodeModule",
        "title": "Solidity: Compile with configured Node module"
      },
      {
        "command": "solidity.compile",
        "title": "Solidity: Compile All"
      },
      {
        "command": "solidity.compilerInfo",
        "title": "Solidity: Compiler Information"
      },
      {
        "command": "solidity.solcReleases",
        "title": "Solidity: Get solidity releases"
      },
      {
        "command": "solidity.fixDocument",
        "title": "Solidity: Fix document rules using Solium"
      },
      {
        "command": "solidity.selectWorkspaceRemoteSolcVersion",
        "title": "Solidity: Change workspace compiler version (Remote)"
      },
      {
        "command": "solidity.selectGlobalRemoteSolcVersion",
        "title": "Solidity: Change global compiler version (Remote)"
      },
      {
        "command": "solidity.downloadRemoteSolcVersion",
        "title": "Solidity: Download compiler"
      },
      {
        "command": "solidity.downloadRemoteVersionAndSetLocalPathSetting",
        "title": "Solidity: Download compiler and set workspace local Path"
      },
      {
        "command": "solidity.changeDefaultCompilerType",
        "title": "Solidity: Change the default workspace compiler to Remote, Local, NodeModule, Embedded"
      },
      {
        "command": "solidity.downloadVerifiedSmartContractEtherscan",
        "title": "Solidity: Download smart contract source code / abi (Etherscan)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "when": "resourceExtname == .sol",
          "command": "solidity.compile.active"
        },
        {
          "when": "explorerResourceIsFolder || resourceExtname == .sol || resourceExtname == .abi",
          "command": "solidity.downloadVerifiedSmartContractEtherscan"
        },
        {
          "when": "resourceExtname == .sol",
          "command": "solidity.compile"
        }
      ],
      "editor/context": [
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.compile.active",
          "group": "1_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.compile",
          "group": "1_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.compilerInfo",
          "group": "1_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.compile.activeUsingRemote",
          "group": "1_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.compile.activeUsingLocalFile",
          "group": "1_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.compile.activeUsingNodeModule",
          "group": "1_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.downloadVerifiedSmartContractEtherscan",
          "group": "1_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.changeDefaultCompilerType",
          "group": "2_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.solcReleases",
          "group": "2_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.selectGlobalRemoteSolcVersion",
          "group": "2_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.selectWorkspaceRemoteSolcVersion",
          "group": "2_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.downloadRemoteSolcVersion",
          "group": "2_solidity"
        },
        {
          "when": "editorLangId == 'solidity'",
          "command": "solidity.downloadRemoteVersionAndSetLocalPathSetting",
          "group": "2_solidity"
        }
      ],
      "explorer/context": [
        {
          "when": "resourceExtname == .sol",
          "command": "solidity.compile.active",
          "group": "2_solidity"
        },
        {
          "when": "resourceExtname == .sol",
          "command": "solidity.compile",
          "group": "2_solidity"
        },
        {
          "when": "explorerResourceIsFolder || resourceExtname == .sol || resourceExtname == .abi",
          "command": "solidity.downloadVerifiedSmartContractEtherscan",
          "group": "2_solidity"
        }
      ]
    },
    "keybindings": [
      {
        "command": "solidity.compile.active",
        "key": "f5",
        "mac": "f5",
        "when": "editorTextFocus && editorLangId == 'solidity'"
      },
      {
        "command": "solidity.compile",
        "key": "Ctrl+f5",
        "mac": "Cmd+f5",
        "when": "editorTextFocus && editorLangId == 'solidity'"
      }
    ],
    "snippets": [
      {
        "language": "solidity",
        "path": "./snippets/solidity.json"
      }
    ],
    "grammars": [
      {
        "language": "solidity",
        "scopeName": "source.solidity",
        "path": "./syntaxes/solidity.json",
        "balancedBracketScopes": [
          "*"
        ],
        "unbalancedBracketScopes": [
          "meta.scope.case-pattern.solidity"
        ]
      }
    ]
  }
}
