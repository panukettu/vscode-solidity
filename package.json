{
	"name": "vsc-solidity",
	"description": "Solidity language support and tools, fork of vscode-solidity.",
	"keywords": [
		"solidity",
		"ethereum",
		"blockchain",
		"compiler",
		"diamond",
		"solhint"
	],
	"version": "0.8.10",
	"publisher": "0xp",
	"license": "MIT",
	"engines": {
		"vscode": "^1.77.0"
	},
	"files": [
		"/out"
	],
	"contributors": [
		"Juan Blanco",
		"panukettu"
	],
	"bugs": {
		"url": "https://github.com/panukettu/vscode-solidity/issues"
	},
	"icon": "images/icon.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/panukettu/vscode-solidity"
	},
	"categories": [
		"Programming Languages",
		"Snippets"
	],
	"main": "./out/src/extension.js",
	"bin": {
		"vscode-solidity-server": "./out/src/server.js"
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"package": "vsce package",
		"prepublishOnly": "npm run compile",
		"build:cli": "tsup src/server.ts -d dist/cli && sh scripts/add_shebang.sh dist/cli/server.js",
		"format": "npx @biomejs/biome format --write ./src",
		"compile": "tsup",
		"compile:es": "npm run esbuild",
		"compile:tsc": "tsc -p ./",
		"watch": "tsup --watch",
		"watch:tsc": "tsc -watch -p ./",
		"test": "nyc --require ts-node/register --require source-map-support/register mocha test/**/*.spec.ts",
		"esbuild-base": "npx esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
		"esbuild-server": "npx esbuild ./src/server.ts --bundle --outfile=out/server.js --external:vscode --format=cjs --platform=node",
		"esbuild": "npm run esbuild-base && npm run esbuild-server -- --sourcemap",
		"test-compile": "tsc -p ./"
	},
	"vsce": {
		"dependencies": false,
		"useYarn": false
	},
	"dependencies": {
		"@iarna/toml": "^2.2.5",
		"axios": "^1.4.0",
		"fast-equals": "^5.0.1",
		"fs-extra": "^4.0.3",
		"glob": "^8.1.0",
		"lodash.debounce": "^4.0.8",
		"prettier": "^3.0.2",
		"prettier-plugin-solidity": "^1.1.3",
		"solc": "^0.8.19",
		"solhint": "^3.6.2",
		"solparse-exp-jb": "3.0.3",
		"viem": "^1.10.8",
		"vscode-languageclient": "^8.1.0",
		"vscode-languageserver": "^8.1.0",
		"vscode-languageserver-textdocument": "^1.0.8",
		"vscode-uri": "3.0.7",
		"yaml-js": "0.2.3"
	},
	"devDependencies": {
		"@biomejs/biome": "^1.3.1",
		"@enio.ai/data-ferret": "^2.0.1",
		"@types/glob": "^8.1.0",
		"@types/lodash.debounce": "^4.0.7",
		"@types/lodash.throttle": "^4.1.8",
		"@types/node": "^20.8.9",
		"@types/vscode": "^1.77.0",
		"@vscode/vsce": "^2.21.1",
		"class-utils": "^0.3.6",
		"esbuild": "0.19.2",
		"esbuild-plugin-copy": "^2.1.1",
		"fuse.js": "^7.0.0",
		"lodash.unset": "^4.5.2",
		"obj-walker": "^1.7.0",
		"reftools": "^1.1.9",
		"safe-clone-deep": "^1.1.5",
		"ts-node": "^7.0.1",
		"ts-node-dev": "^2.0.0",
		"tsconfig-paths": "^4.2.0",
		"tslint": "^5.20.1",
		"tsup": "^7.2.0",
		"typescript": "^5.0.4",
		"what-is-circular": "^1.0.1"
	},
	"nyc": {
		"extension": [
			".ts"
		],
		"include": [
			"src/**/*.ts"
		],
		"exclude": [
			"**/*.d.ts",
			"out",
			"dist"
		],
		"all": true
	},
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "Solidity",
			"properties": {
				"solidity.fuzzLevel.suggestions": {
					"type": "number",
					"default": 0.25,
					"description": "Fuzzy search threshold. 0 = no suggestions, 1 = all suggestions."
				},
				"solidity.fuzzLevel.suggestionsLoose": {
					"type": "number",
					"default": 0.39,
					"description": "Next fuzz threshold when no search results are found. set equal/less than fuzzLevel.suggestions to disable."
				},
				"solidity.fuzzLevel.suggestionsWithImport": {
					"type": "number",
					"default": 0.025,
					"description": "Fuzzy search threshold when import also exists. 0 = no suggestions, 1 = all suggestions."
				},
				"solidity.test.verbosity": {
					"type": "number",
					"default": 3,
					"description": "Basically just sets matching forge verbosity, eg. default 3 = -vvv so traces on fails. Some experimental tracing overview is available."
				},
				"solidity.test.executeOnSave": {
					"type": "boolean",
					"default": true,
					"description": "Run forge test in cursor position on file save."
				},
				"solidity.compiler.outDir": {
					"type": "string",
					"default": "bin",
					"description": "The output directory for extension compilation results eg. 'bin'"
				},
				"solidity.compiler.version.npm": {
					"type": "string",
					"default": "solc",
					"description": "npm package to look for a solc compiler"
				},
				"solidity.compiler.version.remote": {
					"type": "string",
					"default": "latest",
					"description": "Remote solc version used, downloaded from 'https://binaries.soliditylang.org/'. 'latest', 'v0.4.3+commit.2353da71'. See: 'Get solidity releases'"
				},
				"solidity.compiler.version.local": {
					"type": "string",
					"default": "",
					"description": "Local solc path, eg. 'C://v0.4.3+commit.2353da71.js'"
				},
				"solidity.compiler.location": {
					"type": "string",
					"description": "Solc location used by default. Remote version is set with 'remoteSolcVersion' (https://binaries.soliditylang.org/). `File` version is set with `localSolcVersion`. `NPM` looks from node_modules folder or configured 'npmSolcPackage'",
					"enum": [
						"Remote",
						"File",
						"NPM",
						"Extension"
					],
					"default": "Extension"
				},
				"solidity.compiler.outputSelection": {
					"type": [
						"string"
					],
					"default": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.bytecode.object",
						"evm.deployedBytecode.object"
					],
					"description": "Select output items (contract level) from compilation"
				},
				"solidity.compiler.settings": {
					"type": "object",
					"default": {
						"viaIR": true,
						"evmVersion": "paris",
						"optimizer": {
							"enabled": true,
							"runs": 1000
						}
					},
					"description": "Compiler settings used. Overrides other configuration values if clashing. (https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description) "
				},
				"solidity.validation.onChange": {
					"type": "boolean",
					"default": false,
					"description": "Compile and provide validations on file changes."
				},
				"solidity.validation.onSave": {
					"type": "boolean",
					"default": true,
					"description": "Compile and provide validations on file save."
				},
				"solidity.validation.onOpen": {
					"type": "boolean",
					"default": false,
					"description": "Compile and provide validations on file open. Will not validate on initial project open."
				},
				"solidity.validation.delay": {
					"type": "number",
					"default": 350,
					"description": "Delay (debounce) for triggering validation after file changes (in ms)"
				},
				"solidity.project.exclude": {
					"type": "array",
					"default": [],
					"description": "Folders to exclude from sources, i.e: ['temp', 'test']"
				},
				"solidity.project.libs": {
					"type": "array",
					"default": [
						"node_modules",
						"lib"
					],
					"description": "Directories to look for dependencies, eg. ['node_modules', 'lib']."
				},
				"solidity.project.monorepo": {
					"type": "boolean",
					"default": false,
					"description": "Enables multiple project roots. Project is deduced using these files: remappings.txt, truffle-config.js, brownie-config.yaml, foundry.toml, hardhat.config.js, dappfile"
				},
				"solidity.project.sources": {
					"type": "string",
					"default": "",
					"description": "Folder containing the solidity sources eg. 'src'. If not specified looks for folder set in foundry.toml or hardhat.config.js (NOT-ts), if not found defaults to project root."
				},
				"solidity.project.libSources": {
					"type": "array",
					"default": [
						"src",
						"contracts"
					],
					"description": "Directories to look for solidity files within libs."
				},
				"solidity.project.remappings": {
					"type": "array",
					"default": [],
					"description": "Remappings to resolve contracts to local files / directories, i.e: [\"@openzeppelin/=lib/openzeppelin-contracts\",\"ds-test/=lib/ds-test/src/\"]"
				},
				"solidity.project.remappingsWindows": {
					"type": "array",
					"default": [],
					"description": "Windows Remappings to resolve contracts to local Windows files / directories (Note this overrides the generic remapping settings if the OS is Windows) , i.e: [\"@openzeppelin/=C:/lib/openzeppelin-contracts\",\"ds-test/=C:/lib/ds-test/src/\"]"
				},
				"solidity.project.remappingsUnix": {
					"type": "array",
					"default": [],
					"description": "Unix Remappings to resolve contracts to local Unix files / directories (Note this overrides the generic remapping settings if the OS is Unix based), i.e: [\"@openzeppelin/=/opt/lib/openzeppelin-contracts\",\"ds-test/=/opt/lib/ds-test/src/\"]"
				},
				"solidity.linter.type": {
					"type": "string",
					"enum": [
						"",
						"solhint"
					],
					"default": "solhint",
					"description": "Enables linting using solhint."
				},
				"solidity.linter.rules": {
					"type": [
						"object"
					],
					"default": null,
					"description": "Solhint validation rules"
				},
				"solidity.formatter": {
					"type": "string",
					"default": "prettier",
					"enum": [
						"none",
						"prettier",
						"forge"
					],
					"description": "Set the formatter used, prettier (default) or forge fmt (note: forge needs to exist)"
				}
			}
		},
		"languages": [
			{
				"id": "solidity",
				"aliases": [
					"Solidity",
					"solidity"
				],
				"extensions": [
					".sol"
				],
				"configuration": "./solidity.configuration.json"
			}
		],
		"commands": [
			{
				"title": "Preview Selector",
				"enablement": "resourceExtname == .sol",
				"command": "solidity.lens.function.selector",
				"category": "Solidity"
			},
			{
				"title": "Run Test Function",
				"enablement": "resourceExtname == .sol",
				"command": "solidity.lens.function.test",
				"category": "Solidity"
			},
			{
				"title": "Print Test Function Info",
				"enablement": "resourceExtname == .sol && resourceFilename =~ /.*?\\.t\\.sol/g",
				"command": "solidity.lens.function.test.info",
				"category": "Solidity"
			},
			{
				"title": "Clear All Diagnostics",
				"command": "solidity.diagnostics.clear",
				"category": "Solidity"
			},
			{
				"title": "Preview Funcsig",
				"enablement": "resourceExtname == .sol",
				"command": "solidity.lens.function.natspec",
				"category": "Solidity"
			},
			{
				"title": "Preview String Hash",
				"enablement": "resourceExtname == .sol",
				"command": "solidity.lens.string.keccak256",
				"category": "Solidity"
			},
			{
				"title": "Enable CodeLens",
				"command": "solidity.enableCodeLens",
				"category": "Solidity"
			},
			{
				"title": "Disable Codelens",
				"command": "solidity.disableCodeLens",
				"category": "Solidity"
			},
			{
				"title": "Disable Test On Save",
				"command": "solidity.disableExecuteOnSave",
				"enablement": "config.solidity.test.executeOnSave",
				"category": "Solidity"
			},
			{
				"title": "Enable Test On Save",
				"command": "solidity.enableExecuteOnSave",
				"enablement": "!config.solidity.test.executeOnSave",
				"category": "Solidity"
			},
			{
				"title": "Disable Tracing",
				"command": "solidity.test.disableTracing",
				"enablement": "config.solidity.test.verbosity > 4",
				"category": "Solidity"
			},
			{
				"title": "Enable Tracing",
				"command": "solidity.test.enableTracing",
				"enablement": "config.solidity.test.verbosity < 5",
				"category": "Solidity"
			},
			{
				"title": "Disable All Validation",
				"command": "solidity.disableAllValidation",
				"enablement": "(config.solidity.validation.onChange || config.solidity.validation.onSave || config.solidity.validation.onOpen)",
				"category": "Solidity"
			},
			{
				"title": "Disable Validate On Change",
				"enablement": "config.solidity.validation.onChange",
				"command": "solidity.disableValidateOnChange",
				"category": "Solidity"
			},
			{
				"title": "Enable Validate On Change",
				"enablement": "!config.solidity.validation.onChange",
				"command": "solidity.enableValidateOnChange",
				"category": "Solidity"
			},
			{
				"title": "Disable Validate On Save",
				"enablement": "config.solidity.validation.onSave",
				"command": "solidity.disableValidateOnSave",
				"category": "Solidity"
			},
			{
				"title": "Enable Validate On Save",
				"enablement": "!config.solidity.validation.onSave",
				"command": "solidity.enableValidateOnSave",
				"category": "Solidity"
			},
			{
				"title": "Disable Validate On Open",
				"enablement": "config.solidity.validation.onOpen",
				"command": "solidity.disableValidateOnOpen",
				"category": "Solidity"
			},
			{
				"title": "Enable Validate On Open",
				"enablement": "!config.solidity.validation.onOpen",
				"command": "solidity.enableValidateOnOpen",
				"category": "Solidity"
			},
			{
				"title": "Compile Active",
				"enablement": "editorLangId == 'solidity'",
				"category": "Solidity",
				"command": "solidity.compile.active"
			},
			{
				"title": "Compile Active (remote solc)",
				"enablement": "editorLangId == 'solidity'",
				"command": "solidity.compile.activeWithRemoteSolc",
				"category": "Solidity"
			},
			{
				"title": "Compile Active (local file)",
				"enablement": "editorLangId == 'solidity'",
				"command": "solidity.compile.activeWithLocalSolc",
				"category": "Solidity"
			},
			{
				"title": "Compile Active (npm)",
				"enablement": "editorLangId == 'solidity'",
				"command": "solidity.compile.activeWithNPMSolc",
				"category": "Solidity"
			},
			{
				"title": "Compile All",
				"enablement": "editorLangId == 'solidity'",
				"command": "solidity.compile.all",
				"category": "Solidity"
			},
			{
				"title": "Compiler Info",
				"command": "solidity.peekActiveCompilers",
				"category": "Solidity"
			},
			{
				"title": "Get Solc Versions",
				"command": "solidity.peekSolcReleases",
				"category": "Solidity"
			},
			{
				"title": "Set workspace solc (Remote)",
				"command": "solidity.selectWorkspaceRemoteSolcVersion",
				"category": "Solidity"
			},
			{
				"title": "Set global solc (Remote)",
				"command": "solidity.selectGlobalRemoteSolcVersion",
				"category": "Solidity"
			},
			{
				"title": "Download compiler",
				"command": "solidity.downloadRemoteSolcVersion",
				"category": "Solidity"
			},
			{
				"title": "Download and set workspace compiler",
				"command": "solidity.downloadSolcAndSetAsLocal",
				"category": "Solidity"
			},
			{
				"title": "Set workspace solc location",
				"command": "solidity.changeSolcType",
				"category": "Solidity"
			},
			{
				"title": "Download sources from etherscan",
				"command": "solidity.downloadVerifiedSmartContractEtherscan",
				"category": "Solidity"
			}
		],
		"submenus": [
			{
				"id": "solidity.actions",
				"label": "Solidity",
				"icon": "images/icon.png"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"when": "resourceExtname == .sol",
					"command": "solidity.compile.active"
				},
				{
					"when": "explorerResourceIsFolder || resourceExtname == .sol || resourceExtname == .abi",
					"command": "solidity.downloadVerifiedSmartContractEtherscan"
				},
				{
					"when": "resourceExtname == .sol",
					"command": "solidity.compile.all"
				}
			],
			"solidity.actions": [
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.compile.active",
					"group": "1_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.compile.all",
					"group": "1_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.compile.activeWithRemoteSolc",
					"group": "1_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.compile.activeWithLocalSolc",
					"group": "1_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.compile.activeWithNPMSolc",
					"group": "1_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.changeSolcType",
					"group": "2_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.selectGlobalRemoteSolcVersion",
					"group": "2_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.selectWorkspaceRemoteSolcVersion",
					"group": "2_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.downloadRemoteSolcVersion",
					"group": "2_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.downloadSolcAndSetAsLocal",
					"group": "2_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.peekActiveCompilers",
					"group": "3_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.peekSolcReleases",
					"group": "3_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.downloadVerifiedSmartContractEtherscan",
					"group": "3_solidity"
				},
				{
					"when": "editorLangId == 'solidity' && config.solidity.validation.onChange",
					"command": "solidity.disableValidateOnChange",
					"group": "4_solidity"
				},
				{
					"when": "editorLangId == 'solidity' && !config.solidity.validation.onChange",
					"command": "solidity.enableValidateOnChange",
					"group": "4_solidity"
				},
				{
					"when": "editorLangId == 'solidity' && config.solidity.validation.onSave",
					"command": "solidity.disableValidateOnSave",
					"group": "4_solidity"
				},
				{
					"when": "editorLangId == 'solidity' && !config.solidity.validation.onSave",
					"command": "solidity.enableValidateOnSave",
					"group": "4_solidity"
				},
				{
					"when": "editorLangId == 'solidity' && config.solidity.validation.onOpen",
					"command": "solidity.disableValidateOnOpen",
					"group": "4_solidity"
				},
				{
					"when": "editorLangId == 'solidity' && !config.solidity.validation.onOpen",
					"command": "solidity.enableValidateOnOpen",
					"group": "4_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.disableAllValidation",
					"group": "4_solidity"
				}
			],
			"editor/context": [
				{
					"when": "editorLangId == 'solidity'",
					"submenu": "solidity.actions",
					"group": "0_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.compile.active",
					"group": "0_solidity"
				},
				{
					"when": "resourceExtname == .sol && !config.solidity.validation.onChange",
					"command": "solidity.enableValidateOnChange",
					"group": "0_solidity"
				},
				{
					"when": "resourceExtname == .sol && config.solidity.validation.onChange",
					"command": "solidity.disableValidateOnChange",
					"group": "0_solidity"
				},
				{
					"when": "resourceFilename =~ /.*?\\.t\\.sol/g && !config.solidity.test.executeOnSave",
					"command": "solidity.enableExecuteOnSave",
					"group": "0_solidity"
				},
				{
					"when": "resourceFilename =~ /.*?\\.t\\.sol/g && config.solidity.test.executeOnSave",
					"command": "solidity.disableExecuteOnSave",
					"group": "0_solidity"
				},
				{
					"when": "resourceFilename =~ /.*?\\.t\\.sol/g && config.solidity.test.verbosity < 5",
					"command": "solidity.test.enableTracing",
					"group": "0_solidity"
				},
				{
					"when": "resourceFilename =~ /.*?\\.t\\.sol/g && config.solidity.test.verbosity > 4",
					"command": "solidity.test.disableTracing",
					"group": "0_solidity"
				},
				{
					"when": "editorLangId == 'solidity'",
					"command": "solidity.diagnostics.clear",
					"group": "0_solidity"
				}
			],
			"explorer/context": [
				{
					"when": "resourceExtname == .sol",
					"command": "solidity.compile.active",
					"group": "2_solidity"
				},
				{
					"when": "resourceExtname == .sol",
					"command": "solidity.compile.all",
					"group": "2_solidity"
				},
				{
					"when": "explorerResourceIsFolder || resourceExtname == .sol || resourceExtname == .abi",
					"command": "solidity.downloadVerifiedSmartContractEtherscan",
					"group": "3_solidity"
				}
			]
		},
		"keybindings": [
			{
				"command": "solidity.compile.active",
				"key": "f5",
				"mac": "f5",
				"when": "editorTextFocus && editorLangId == 'solidity'"
			},
			{
				"command": "solidity.compile.all",
				"key": "Ctrl+f5",
				"mac": "Cmd+f5",
				"when": "editorTextFocus && editorLangId == 'solidity'"
			}
		],
		"snippets": [
			{
				"language": "solidity",
				"path": "./snippets/solidity.json"
			}
		],
		"grammars": [
			{
				"language": "solidity",
				"scopeName": "source.solidity",
				"path": "./syntaxes/solidity.json",
				"balancedBracketScopes": [
					"*"
				],
				"unbalancedBracketScopes": [
					"meta.scope.case-pattern.solidity"
				]
			}
		]
	}
}
