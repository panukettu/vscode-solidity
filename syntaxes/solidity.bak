{
  "fileTypes": ["sol"],
  "name": "Solidity",
  "patterns": [
    {
      "include": "#natspec"
    },

    {
      "include": "#declaration-userType"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#global"
    },
    {
      "include": "#control"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#primitive"
    },
    {
      "include": "#type-primitive"
    },
    {
      "include": "#kek-modifiers-extended-scope"
    },
    {
      "include": "#kek-function"
    },
    {
      "include": "#declaration"
    },
    {
      "include": "#kek-types"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#kek-entities"
    },
    {
      "include": "#kek-type-user"
    },
    {
      "include": "#assembly"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "natspec": {
      "patterns": [
        {
          "begin": "/\\*\\*",
          "end": "\\*/",
          "name": "comment.block.documentation",
          "patterns": [
            {
              "include": "#natspec-tags"
            }
          ]
        },
        {
          "begin": "///",
          "end": "$",
          "name": "comment.block.documentation",
          "patterns": [
            {
              "include": "#natspec-tags"
            }
          ]
        }
      ]
    },
    "natspec-tags": {
      "patterns": [
        {
          "include": "#comment-todo"
        },
        {
          "include": "#natspec-tag-title"
        },
        {
          "include": "#natspec-tag-author"
        },
        {
          "include": "#natspec-tag-notice"
        },
        {
          "include": "#natspec-tag-dev"
        },
        {
          "include": "#natspec-tag-param"
        },
        {
          "include": "#natspec-tag-return"
        },
        {
          "include": "#natspec-tag-custom"
        },
        {
          "include": "#natspec-tag-inheritdoc"
        }
      ]
    },
    "natspec-tag-title": {
      "match": "(@title)\\b",
      "name": "storage.type.title.natspec"
    },

    "natspec-tag-author": {
      "match": "(@author)\\b",
      "name": "storage.type.author.natspec"
    },
    "natspec-tag-notice": {
      "match": "(@notice)\\b",
      "name": "storage.type.dev.natspec"
    },
    "natspec-tag-custom": {
      "match": "(@custom:\\w*)\\b",
      "name": "storage.type.dev.natspec"
    },
    "natspec-tag-inheritdoc": {
      "match": "(@inheritdoc)\\b",
      "name": "storage.type.author.natspec"
    },
    "natspec-tag-dev": {
      "match": "(@dev)\\b",
      "name": "storage.type.dev.natspec"
    },
    "natspec-tag-param": {
      "match": "(@param)(\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.param.natspec"
        },
        "3": {
          "name": "variable.other.natspec"
        }
      }
    },
    "natspec-tag-return": {
      "match": "(@return)(\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.return.natspec"
        },
        "3": {
          "name": "variable.other.natspec"
        }
      }
    },
    "comment": {
      "patterns": [
        {
          "include": "#comment-line"
        },
        {
          "include": "#comment-block"
        }
      ]
    },
    "comment-todo": {
      "match": "(?i)\\b(FIXME|TODO|CHANGED|XXX|IDEA|HACK|NOTE|REVIEW|NB|BUG|QUESTION|COMBAK|TEMP|SUPPRESS|LINT|\\w+-disable|\\w+-suppress)\\b(?-i)",
      "name": "keyword.comment.todo"
    },
    "comment-line": {
      "begin": "(?<!tp:)//",
      "end": "$",
      "name": "comment.line",
      "patterns": [
        {
          "include": "#comment-todo"
        }
      ]
    },
    "comment-block": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block",
      "patterns": [
        {
          "include": "#comment-todo"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "include": "#operator-logic"
        },
        {
          "include": "#operator-mapping"
        },
        {
          "include": "#operator-arithmetic"
        },
        {
          "include": "#operator-binary"
        },
        {
          "include": "#operator-assignment"
        }
      ]
    },
    "operator-logic": {
      "match": "(==|\\!=|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?|\\!)",
      "name": "keyword.operator.logic"
    },
    "operator-mapping": {
      "match": "(=>)",
      "name": "keyword.operator.mapping"
    },
    "operator-arithmetic": {
      "match": "(\\+|\\-|\\/|\\*)",
      "name": "keyword.operator.arithmetic"
    },
    "operator-binary": {
      "match": "(\\^|\\&|\\||<<|>>)",
      "name": "keyword.operator.binary"
    },
    "operator-assignment": {
      "match": "(\\:?=)",
      "name": "keyword.operator.assignment"
    },
    "control": {
      "patterns": [
        {
          "include": "#control-flow"
        },
        {
          "include": "#control-using"
        },
        {
          "include": "#control-import"
        },
        {
          "include": "#control-pragma"
        },
        {
          "include": "#control-underscore"
        },
        {
          "include": "#control-unchecked"
        },
        {
          "include": "#control-other"
        }
      ]
    },
    "control-flow": {
      "patterns": [
        {
          "match": "\\b(if|else|for|while|do|break|continue|try|catch|finally|throw|return|global)\\b",
          "name": "keyword.control.flow"
        },
        {
          "begin": "\\b(returns)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.return"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#declaration-function-parameters"
            }
          ]
        }
      ]
    },
    "control-using": {
      "patterns": [
        {
          "match": "\\b(using)\\b\\s+\\{(.*?)\\}\\s+\\b(for)\\b\\s+\\b([A-Za-z\\d_]+)\\s?(global)?",
          "captures": {
            "1": {
              "name": "keyword.control.using"
            },
            "2": {
              "name": "entity.name.function",
              "patterns": [
                {
                  "match": "(\\w+)",
                  "name": "entity.name.function.free"
                }
              ]
            },
            "3": {
              "name": "keyword.control.for"
            },
            "4": {
              "name": "entity.name.type",
              "patterns": [
                {
                  "include": "#type-primitive"
                },
                {
                  "include": "#kek-types"
                },
                {
                  "include": "#kek-entities"
                }
              ]
            },
            "5": {
              "name": "keyword.control.global"
            }
          }
        },
        {
          "match": "\\b(using)\\b\\s+\\b([A-Za-z\\d_]+)\\b\\s+\\b(for)\\b\\s+\\b([A-Za-z\\d_]+)\\s?(global)?",
          "captures": {
            "1": {
              "name": "keyword.control.using"
            },
            "2": {
              "name": "entity.name.type.library"
            },
            "3": {
              "name": "keyword.control.for"
            },
            "4": {
              "name": "entity.name.type",
              "patterns": [
                {
                  "include": "#type-primitive"
                },
                {
                  "include": "#kek-types"
                },
                {
                  "include": "#kek-entities"
                }
              ]
            },
            "5": {
              "name": "keyword.control.global"
            }
          }
        },
        {
          "match": "\\b(using)\\b",
          "name": "keyword.control.using"
        }
      ]
    },
    "control-import": {
      "patterns": [
        {
          "begin": "\\b(import)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.import"
            }
          },
          "end": "(?=\\;)",
          "patterns": [
            {
              "begin": "((?=\\{))",
              "end": "((?=\\}))",
              "patterns": [
                {
                  "match": "\\b[a-z]\\w*\\b",
                  "name": "entity.name.function.free"
                },
                {
                  "include": "#kek-entities"
                },
                {
                  "match": "\\b(\\w+)\\b",
                  "name": "entity.name.type.interface"
                }
              ]
            },
            {
              "match": "\\b(from)\\b",
              "name": "keyword.control.import.from"
            },
            {
              "include": "#string"
            },
            {
              "include": "#punctuation"
            }
          ]
        },
        {
          "match": "\\b(import)\\b",
          "name": "keyword.control.import"
        }
      ]
    },
    "control-unchecked": {
      "match": "\\b(unchecked)\\b",
      "name": "keyword.control.unchecked"
    },
    "control-pragma": {
      "match": "\\b(pragma)(?:\\s+([A-Za-z_]\\w+)\\s+([^\\s]+))?\\b",
      "captures": {
        "1": {
          "name": "keyword.control.pragma"
        },
        "2": {
          "name": "entity.name.tag.pragma"
        },
        "3": {
          "name": "constant.other.pragma"
        }
      }
    },
    "control-underscore": {
      "match": "\\b(_)\\b",
      "name": "constant.other.underscore"
    },
    "control-other": {
      "match": "\\b(new|delete|emit)\\b",
      "name": "keyword.control"
    },
    "constant": {
      "patterns": [
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#constant-time"
        },
        {
          "include": "#constant-currency"
        }
      ]
    },
    "constant-boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean"
    },
    "constant-time": {
      "match": "\\b(seconds|minutes|hours|days|weeks|years)\\b",
      "name": "constant.language.time"
    },
    "constant-currency": {
      "match": "\\b(ether|wei|gwei|finney|szabo)\\b",
      "name": "constant.language.currency"
    },
    "number": {
      "patterns": [
        {
          "include": "#number-decimal"
        },
        {
          "include": "#number-hex"
        },
        {
          "include": "#number-scientific"
        }
      ]
    },
    "number-decimal": {
      "match": "\\b([0-9_]+(\\.[0-9_]+)?)\\b",
      "name": "constant.numeric.decimal"
    },
    "number-hex": {
      "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
      "name": "constant.numeric.hexadecimal"
    },
    "number-scientific": {
      "match": "\\b(?:0\\.(?:0[0-9]|[0-9][0-9_]?)|[0-9][0-9_]*(?:\\.\\d{1,2})?)(?:e[+-]?[0-9_]+)?",
      "name": "constant.numeric.scientific"
    },
    "string": {
      "patterns": [
        {
          "match": "\\\"(?:\\\\\"|[^\\\"])*\\\"",
          "name": "string.quoted.double"
        },
        {
          "match": "\\'(?:\\\\'|[^\\'])*\\'",
          "name": "string.quoted.single"
        }
      ]
    },
    "primitive": {
      "patterns": [
        {
          "include": "#number-decimal"
        },
        {
          "include": "#number-hex"
        },
        {
          "include": "#number-scientific"
        },
        {
          "include": "#string"
        }
      ]
    },
    "type-primitive": {
      "patterns": [
        {
          "begin": "\\b(address|string\\d*|bytes\\d*|int\\d*|uint\\d*|bool|hash\\d*)\\b(?:\\[\\])(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.type.primitive"
            }
          },
          "end": "(\\))",
          "patterns": [
            {
              "include": "#primitive"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#global"
            },
            {
              "include": "#variable"
            }
          ]
        },
        {
          "match": "\\b(address|string\\d*|bytes\\d*|int\\d*|uint\\d*|bool|hash\\d*)\\b",
          "name": "support.type.primitive"
        }
      ]
    },
    "global": {
      "patterns": [
        {
          "include": "#global-variables"
        },
        {
          "include": "#global-functions"
        }
      ]
    },
    "global-variables": {
      "patterns": [
        {
          "match": "\\b(this)\\b",
          "name": "variable.language.this"
        },
        {
          "match": "\\b(super)\\b",
          "name": "variable.language.super"
        },
        {
          "match": "\\b(abi)\\b",
          "name": "variable.language.builtin.abi"
        },
        {
          "match": "\\b(msg.sender)\\b",
          "name": "variable.language.transaction.sender"
        },
        {
          "match": "\\b(tx.origin)\\b",
          "name": "variable.language.transaction.origin"
        },
        {
          "match": "(?<=.)(length)",
          "name": "support.type.primitive"
        },
        {
          "match": "\\b(msg\\.sender|msg|block|tx|now)\\b",
          "name": "variable.language.transaction"
        },

        {
          "match": "\\b(tx\\.origin|tx\\.gasprice|msg\\.data|msg\\.sig|msg\\.value)\\b",
          "name": "variable.language.transaction"
        }
      ]
    },
    "global-functions": {
      "patterns": [
        {
          "match": "\\b(require|assert|revert)\\b",
          "name": "keyword.control.exceptions"
        },
        {
          "match": "\\b(selfdestruct|suicide)\\b",
          "name": "keyword.control.contract"
        },
        {
          "match": "\\b(addmod|mulmod|keccak256|sha256|sha3|ripemd160|ecrecover)\\b",
          "name": "support.function.math"
        },
        {
          "match": "\\b(unicode)\\b",
          "name": "support.function.string"
        },
        {
          "match": "\\b(blockhash|gasleft)\\b",
          "name": "variable.language.transaction"
        },
        {
          "match": "\\b(type)\\b",
          "name": "variable.language.type"
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "include": "#kek-modifiers-storage"
        },
        {
          "match": "\\b(\\_\\w+)\\b",
          "captures": {
            "1": {
              "name": "variable.parameter.function"
            }
          }
        },
        {
          "match": "(?:\\.)(\\w+)\\b",
          "captures": {
            "1": {
              "name": "support.variable.property"
            }
          }
        },
        {
          "match": "(?<=calldata)\\s(\\w+)\\b",
          "name": "variable.parameter.other",
          "captures": {
            "1": {
              "name": "variable.parameter.calldata"
            }
          }
        },
        {
          "match": "(?<=memory)\\s(\\w+)\\b",
          "name": "variable.parameter.other",
          "captures": {
            "1": {
              "name": "variable.parameter.memory"
            }
          }
        },
        {
          "match": "(?<=storage)\\s(\\w+)\\b",
          "name": "variable.parameter.other",
          "captures": {
            "1": {
              "name": "variable.parameter.storage"
            }
          }
        },
        {
          "match": "\\b(\\w+)\\b",
          "captures": {
            "1": {
              "name": "variable.parameter.other"
            }
          }
        }
      ]
    },
    "modifier-call": {
      "patterns": [
        {
          "include": "#function-call"
        },
        {
          "match": "\\b(\\w+)\\b",
          "name": "entity.name.function.modifier"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#declaration-contract"
        },
        {
          "include": "#declaration-userType"
        },
        {
          "include": "#declaration-interface"
        },
        {
          "include": "#declaration-library"
        },
        {
          "include": "#declaration-function"
        },
        {
          "include": "#declaration-modifier"
        },
        {
          "include": "#declaration-constructor"
        },
        {
          "include": "#declaration-event"
        },
        {
          "include": "#declaration-storage"
        },
        {
          "include": "#declaration-error"
        }
      ]
    },
    "declaration-storage-field": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#control"
        },
        {
          "include": "#type-primitive"
        },
        {
          "include": "#kek-modifiers-access"
        },
        {
          "include": "#type-modifier-immutable"
        },
        {
          "include": "#type-modifier-extend-scope"
        },
        {
          "include": "#kek-modifiers-payable"
        },
        {
          "include": "#type-modifier-constant"
        },
        {
          "include": "#kek-type-user"
        },
        {
          "include": "#primitive"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "declaration-storage": {
      "patterns": [
        {
          "include": "#declaration-storage-mapping"
        },
        {
          "include": "#declaration-struct"
        },
        {
          "include": "#declaration-enum"
        },
        {
          "include": "#declaration-storage-field"
        }
      ]
    },
    "declaration-userType": {
      "match": "\\b(type)\\b\\s+(\\w+)\\b\\s+\\b(is)\\b",
      "captures": {
        "1": {
          "name": "storage.type.userType"
        },
        "2": {
          "name": "entity.name.type.userType"
        },
        "3": {
          "name": "storage.modifier.is"
        }
      }
    },
    "declaration-contract": {
      "patterns": [
        {
          "begin": "\\b(contract)\\b\\s+(\\w+)\\b\\s+\\b(is)\\b\\s+",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.contract"
            },
            "2": {
              "name": "entity.name.type.contract"
            },
            "3": {
              "name": "storage.modifier.is"
            }
          },
          "patterns": [
            {
              "match": "\\b(\\w+)\\b",
              "name": "entity.name.type.contract.extend"
            }
          ]
        },
        {
          "match": "\\b(contract)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.contract"
            },
            "2": {
              "name": "entity.name.type.contract"
            }
          }
        }
      ]
    },
    "declaration-interface": {
      "patterns": [
        {
          "begin": "\\b(interface)\\b\\s+(\\w+)\\b\\s+\\b(is)\\b\\s+",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.interface"
            },
            "2": {
              "name": "entity.name.type.interface"
            },
            "3": {
              "name": "storage.modifier.is"
            }
          },
          "patterns": [
            {
              "match": "\\b(\\w+)\\b",
              "name": "entity.name.type.interface.extend"
            }
          ]
        },
        {
          "match": "\\b(interface)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.interface"
            },
            "2": {
              "name": "entity.name.type.interface"
            }
          }
        }
      ]
    },
    "declaration-library": {
      "match": "\\b(library)(\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.library"
        },
        "3": {
          "name": "entity.name.type.library"
        }
      }
    },
    "declaration-struct": {
      "patterns": [
        {
          "include": "#kek-type-struct"
        },
        {
          "match": "\\b(struct)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.struct"
            },
            "3": {
              "name": "entity.name.type.struct"
            }
          }
        },
        {
          "begin": "\\b(struct)\\b\\s*(\\w+)?\\b\\s*(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.struct"
            },
            "2": {
              "name": "entity.name.type.struct"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "include": "#type-primitive"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "declaration-event": {
      "patterns": [
        {
          "begin": "\\b(event)\\b(?:\\s+(\\w+)\\b)?",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": {
              "name": "storage.type.event"
            },
            "2": {
              "name": "entity.name.type.event"
            }
          },
          "patterns": [
            {
              "include": "#type-primitive"
            },
            {
              "match": "\\b(?:(indexed)\\s)?(\\w+)(?:,\\s*|)",
              "captures": {
                "1": {
                  "name": "storage.type.modifier.indexed"
                },
                "2": {
                  "name": "variable.parameter.event"
                }
              }
            },
            {
              "include": "#punctuation"
            }
          ]
        },
        {
          "match": "\\b(event)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.event"
            },
            "3": {
              "name": "entity.name.type.event"
            }
          }
        }
      ]
    },
    "declaration-constructor": {
      "patterns": [
        {
          "begin": "\\b(constructor)\\b",
          "beginCaptures": {
            "1": {
              "name": "storage.type.constructor"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "begin": "\\G\\s*(?=\\()",
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#type-primitive"
                },
                {
                  "include": "#kek-type-struct"
                },
                {
                  "include": "#variable"
                },
                {
                  "include": "#punctuation"
                },
                {
                  "include": "#comment"
                },
                {
                  "include": "#declaration-function-parameters"
                },
                {
                  "include": "#global"
                }
              ]
            },
            {
              "begin": "(?<=\\))",
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#kek-modifiers-access"
                },
                {
                  "include": "#function-call"
                }
              ]
            }
          ]
        },
        {
          "match": "\\b(constructor)\\b",
          "captures": {
            "1": {
              "name": "storage.type.constructor"
            }
          }
        }
      ]
    },
    "declaration-enum": {
      "patterns": [
        {
          "begin": "\\b(enum)\\s+(\\w+)\\b",
          "beginCaptures": {
            "1": {
              "name": "storage.type.enum"
            },
            "2": {
              "name": "entity.name.type.enum"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "match": "\\b(\\w+)\\b",
              "name": "variable.other.enummember"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#comment"
            }
          ]
        },
        {
          "match": "\\b(enum)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.enum"
            },
            "3": {
              "name": "entity.name.type.enum"
            }
          }
        }
      ]
    },
    "declaration-function-parameters": {
      "match": "\\((.*?)(?=\\))",
      "patterns": [
        {
          "include": "#type-primitive"
        },
        {
          "match": "\\b([A-Z]\\w*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.struct"
            }
          }
        },
        {
          "include": "#variable"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#comment"
        }
      ]
    },

    "kek-function": {
      "patterns": [
        {
          "match": "(function\\s?\\w+?(?:[\\s\\S]*?))?(?=\\n)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#punctuation"
                },
                {
                  "include": "#kek-type-function"
                },
                {
                  "match": "\\b(function)\\s+(\\w+)?(?:\\((.*?)\\))?",
                  "captures": {
                    "1": {
                      "name": "storage.type.function"
                    },
                    "2": {
                      "name": "entity.name.function"
                    },
                    "3": {
                      "name": "entity.name.params",
                      "patterns": [
                        {
                          "include": "#type-primitive"
                        },
                        {
                          "include": "#kek-type-struct"
                        },
                        {
                          "include": "#punctuation"
                        },
                        {
                          "include": "#comment"
                        },
                        {
                          "include": "#declaration-function-parameters"
                        },
                        {
                          "include": "#variable"
                        },
                        {
                          "include": "#global"
                        }
                      ]
                    }
                  }
                },
                { "include": "#declaration-function" }
              ]
            }
          }
        }
      ]
    },
    "declaration-function": {
      "patterns": [
        {
          "begin": "\\b(function)\\s+(\\w+)\\b",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function"
            },
            "2": {
              "name": "entity.name.function"
            }
          },
          "end": "(?=\\{|;)",
          "patterns": [
            {
              "include": "#natspec"
            },
            {
              "include": "#global"
            },
            {
              "include": "#declaration-function-parameters"
            },
            {
              "include": "#kek-modifiers-access"
            },
            {
              "include": "#kek-modifiers-payable"
            },
            {
              "include": "#type-modifier-immutable"
            },
            {
              "include": "#kek-modifiers-extended-scope"
            },
            {
              "include": "#control-flow"
            },
            {
              "include": "#function-call"
            },
            {
              "include": "#modifier-call"
            },
            {
              "include": "#punctuation"
            }
          ]
        },
        {
          "match": "\\b(function)\\s+([A-Za-z_]\\w*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.function"
            },
            "2": {
              "name": "entity.name.function"
            }
          }
        }
      ]
    },
    "declaration-modifier": {
      "patterns": [
        {
          "begin": "\\b(modifier)\\b\\s*(\\w+)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.modifier"
            },
            "2": {
              "name": "entity.name.function.modifier"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#declaration-function-parameters"
            },
            {
              "begin": "(?<=\\))",
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#declaration-function-parameters"
                },
                {
                  "include": "#kek-modifiers-access"
                },
                {
                  "include": "#kek-modifiers-payable"
                },
                {
                  "include": "#type-modifier-immutable"
                },
                {
                  "include": "#kek-modifiers-extended-scope"
                },
                {
                  "include": "#function-call"
                },
                {
                  "include": "#modifier-call"
                },
                {
                  "include": "#control-flow"
                }
              ]
            }
          ]
        },
        {
          "match": "\\b(modifier)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.modifier"
            },
            "3": {
              "name": "entity.name.function"
            }
          }
        }
      ]
    },
    "declaration-storage-mapping": {
      "patterns": [
        {
          "begin": "\\b(mapping)\\b",
          "beginCaptures": {
            "1": {
              "name": "storage.type.mapping"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#declaration-storage-mapping"
            },
            {
              "include": "#type-primitive"
            },
            {
              "include": "#kek-type-user"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#operator"
            }
          ]
        },
        {
          "match": "\\b(mapping)\\b",
          "name": "storage.type.mapping"
        }
      ]
    },
    "declaration-error": {
      "match": "\\b(error)(\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.error"
        },
        "3": {
          "name": "entity.name.type.error"
        }
      }
    },
    "function-call": {
      "match": "\\b([A-Za-z_]\\w*)\\s*(\\()",
      "captures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "punctuation.parameters.begin"
        }
      }
    },
    "assembly": {
      "patterns": [
        {
          "match": "\\b(assembly)\\b",
          "name": "keyword.control.assembly"
        },
        {
          "match": "\\b(let)\\b",
          "name": "storage.type.assembly"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": ";",
          "name": "punctuation.terminator.statement"
        },
        {
          "match": "\\.",
          "name": "punctuation.accessor"
        },
        {
          "match": ",",
          "name": "punctuation.separator"
        },
        {
          "match": "\\{",
          "name": "punctuation.brace.curly.begin"
        },
        {
          "match": "\\}",
          "name": "punctuation.brace.curly.end"
        },
        {
          "match": "\\[",
          "name": "punctuation.brace.square.begin"
        },
        {
          "match": "\\]",
          "name": "punctuation.brace.square.end"
        },
        {
          "match": "\\(",
          "name": "punctuation.parameters.begin"
        },
        {
          "match": "\\)",
          "name": "punctuation.parameters.end"
        }
      ]
    },

    "kek-type-function": {
      "patterns": [
        {
          "match": "\\b(function).(\\w+)(.*?)\\s(public|external|internal|private)\\s?(pure|view|payable)?\\s?(virtual)?\\s?(override)?(\\([\\w,]+\\))?\\s?(.*?)\\s?((returns)\\s?(\\(.*?)(?=\\))|(?=[\\{|\\;]))",
          "name": "kek.function.${4:/downcase}.${5:/downcase}.${11:/downcase}",
          "captures": {
            "1": {
              "name": "storage.type.function",
              "patterns": [
                {
                  "match": "\\b(function)\\b",
                  "name": "kek.function.type"
                }
              ]
            },
            "2": {
              "name": "entity.name.function",
              "patterns": [
                {
                  "match": "(\\w+)",
                  "name": "kek.function.name"
                }
              ]
            },
            "3": {
              "name": "kek.function.params",
              "patterns": [
                {
                  "include": "#type-primitive"
                },
                {
                  "include": "#kek-type-struct"
                },
                {
                  "include": "#punctuation"
                },
                {
                  "include": "#comment"
                },
                {
                  "include": "#declaration-function-parameters"
                },
                {
                  "include": "#variable"
                },
                {
                  "include": "#global"
                }
              ]
            },
            "4": {
              "patterns": [
                {
                  "include": "#kek-modifiers-access"
                }
              ]
            },
            "5": {
              "patterns": [
                {
                  "include": "#kek-func-modifiers-extend"
                },
                {
                  "include": "#kek-modifiers-payable"
                }
              ]
            },
            "6": {
              "name": "storage.type.modifier.extendedscope",
              "patterns": [
                {
                  "match": "(virtual)",
                  "name": "kek.function.virtual"
                }
              ]
            },
            "7": {
              "name": "storage.type.modifier.extendedscope",
              "patterns": [
                {
                  "match": "(\\w+)",
                  "name": "kek.function.override"
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#kek-func-modifiers-extend"
                }
              ]
            },
            "9": {
              "name": "kek.function.modifier",
              "patterns": [
                {
                  "include": "#punctuation"
                },
                {
                  "match": "(\\w+)(?:\\((.*)\\))?",
                  "captures": {
                    "1": {
                      "name": "keyword.control.flow.return"
                    },
                    "2": {
                      "name": "kek.function.return.value",
                      "patterns": [
                        {
                          "include": "#kek-func-modifiers-extend"
                        },
                        {
                          "include": "#kek-type-struct"
                        },
                        {
                          "include": "#type-primitive"
                        },
                        {
                          "include": "#variable"
                        },
                        {
                          "include": "#punctuation"
                        },
                        {
                          "include": "#comment"
                        },
                        {
                          "include": "#declaration-function-parameters"
                        },
                        {
                          "include": "#global"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "11": {
              "name": "kek.function.return",
              "patterns": [
                {
                  "match": "\\b(returns)\\b",
                  "name": "keyword.control.flow.return"
                },
                {
                  "include": "#punctuation"
                }
              ]
            },
            "12": {
              "name": "kek.function.return.values",
              "patterns": [
                {
                  "include": "#kek-func-modifiers-extend"
                },
                {
                  "include": "#kek-type-struct"
                },
                {
                  "include": "#type-primitive"
                },
                {
                  "include": "#variable"
                },
                {
                  "include": "#punctuation"
                },
                {
                  "include": "#comment"
                },
                {
                  "include": "#declaration-function-parameters"
                },
                {
                  "include": "#global"
                }
              ]
            }
          }
        }
      ]
    },
    "kek-type-user": {
      "patterns": [
        {
          "begin": "\\b([A-Z]\\w*)\\b(?:\\[\\])(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type"
            }
          },
          "end": "(\\))",
          "patterns": [
            {
              "include": "#primitive"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#global"
            },
            {
              "include": "#variable"
            }
          ]
        },
        {
          "match": "\\b([A-Z]\\w*)\\b",
          "name": "entity.name.type"
        }
      ]
    },
    "kek-modifiers-access": {
      "match": "\\b(external|public|internal|private)\\b",
      "name": "storage.type.modifier.access",
      "captures": {
        "1": {
          "patterns": [
            {
              "match": "(internal|private)",
              "name": "storage.type.modifier.access.closed.internal"
            },
            {
              "match": "(private)",
              "name": "storage.type.modifier.access.closed.private"
            },
            {
              "match": "(external)",
              "name": "storage.type.modifier.access.open.external"
            },
            {
              "match": "(public)",
              "name": "storage.type.modifier.access.open.public"
            }
          ]
        }
      }
    },
    "kek-modifiers-payable": {
      "match": "\\b(payable)\\b",
      "captures": {
        "1": {
          "name": "storage.type.modifier.payable",
          "patterns": [
            {
              "match": "\\b(payable)\\b",
              "name": "kek.function.payable"
            }
          ]
        }
      }
    },
    "kek-modifiers-storage": {
      "match": "\\b(storage|memory|calldata)\\b",
      "captures": {
        "1": {
          "name": "storage.type.modifier",
          "patterns": [
            {
              "match": "\\b(storage)\\b",
              "name": "storage.type.modifier.storage"
            },
            {
              "match": "\\b(memory)\\b",
              "name": "storage.type.modifier.memory"
            },
            {
              "match": "\\b(calldata)\\b",
              "name": "storage.type.modifier.calldata"
            }
          ]
        }
      }
    },
    "kek-func-modifiers-extend": {
      "match": "\\b(immutable|pure|view|override|inherited|indexed|virtual|abstract)\\b",
      "captures": {
        "1": {
          "name": "storage.type.modifier.extendedscope",
          "patterns": [
            {
              "match": "\\b(pure)\\b",
              "name": "storage.type.modifier.pure"
            },
            {
              "match": "\\b(view)\\b",
              "name": "storage.type.modifier.view"
            },
            {
              "match": "\\b(immutable)\\b",
              "name": "storage.type.modifier.readonly"
            },
            {
              "match": "\\b(abstract)\\b",
              "name": "storage.type.modifier.abstract"
            },
            {
              "match": "\\b(override)\\b",
              "name": "storage.type.modifier.override"
            },
            {
              "match": "\\b(inherited)\\b",
              "name": "storage.type.modifier.inherited"
            },
            {
              "match": "\\b(indexed)\\b",
              "name": "storage.type.modifier.indexed"
            },
            {
              "match": "\\b(virtual)\\b",
              "name": "storage.type.modifier.virtual"
            }
          ]
        }
      }
    },
    "type-modifier-constant": {
      "match": "\\b(constant)\\b",
      "name": "storage.type.modifier.readonly"
    },
    "type-modifier-immutable": {
      "match": "\\b(immutable)\\b",
      "name": "storage.type.modifier.readonly"
    },
    "kek-modifiers-extended-scope": {
      "patterns": [
        {
          "include": "#type-modifier-immutable"
        },
        {
          "include": "#kek-modifiers-storage"
        },
        {
          "include": "#kek-func-modifiers-extend"
        }
      ]
    },
    "kek-types": {
      "patterns": [
        {
          "include": "#kek-type-struct"
        },
        {
          "include": "#kek-type-collection"
        }
      ]
    },
    "kek-type-collection": {
      "patterns": [
        {
          "match": "(\\w+)(?=(\\.length|\\.push))",
          "name": "kek.collection kek.array"
        },
        {
          "match": "(\\w+)\\[(?=(?:i|index|idx|j)|(?:\\w+\\.length))(.*?(?:-.*?\\w+)?)\\].?(\\w+)?",
          "captures": {
            "1": {
              "name": "kek.collection kek.array"
            },
            "2": {
              "name": "kek.collection.key kek.array.key"
            },
            "3": {
              "name": "kek.collection.value.property kek.array.value.property"
            }
          }
        },
        {
          "match": "(\\w+\\[.*?\\]*[^\\;=\\s]+)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "match": "(\\w+)(\\[[\\d|i|j|index|idx]+\\])(.*)",
                  "captures": {
                    "1": {
                      "name": "kek.collection kek.array"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#global-variables"
                        },
                        {
                          "include": "#punctuation"
                        },
                        {
                          "match": "(i|j|index|idx|.*?\\.length\\s?\\-?\\d+?)",
                          "name": "kek.collection.key kek.array.key"
                        },
                        {
                          "match": "(\\d+)",
                          "name": "kek.collection.key kek.array.key constant.numeric.decimal"
                        }
                      ]
                    },
                    "3": {
                      "patterns": [
                        {
                          "include": "#global-variables"
                        },
                        {
                          "include": "#punctuation"
                        },
                        {
                          "match": "(?<=\\[)(i|j|index|idx|.*?\\.length\\s?\\-?\\d+?)(?=\\])",
                          "name": "kek.collection.key kek.array.key"
                        },
                        {
                          "match": "(?<=.)(\\w+)",
                          "name": "kek.collection.value.property kek.array.value.property"
                        },
                        {
                          "match": "(?<=\\[)(\\d+)(?=\\])",
                          "name": "kek.collection.key kek.array.key constant.numeric.decimal"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "(\\w+)(\\[.+\\])(.*)(?!(\\smemory))",
                  "captures": {
                    "1": {
                      "name": "kek.collection kek.mapping"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#global-variables"
                        },
                        {
                          "include": "#punctuation"
                        },
                        {
                          "match": "(?<=\\[)(\\w+)(?=\\])",
                          "name": "kek.collection.key kek.mapping.key"
                        }
                      ]
                    },
                    "3": {
                      "patterns": [
                        {
                          "include": "#global-variables"
                        },
                        {
                          "include": "#punctuation"
                        },
                        {
                          "match": "(?<=\\[)(\\w+)(?=\\])",
                          "name": "kek.collection.key kek.mapping.key"
                        },
                        {
                          "match": "(?<=.)(\\w+)",
                          "name": "kek.collection.value.property kek.mapping.value.property"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "kek-type-struct": {
      "patterns": [
        {
          "match": "([A-Z]\\w+\\[?\\d*?\\]?)\\s(memory|calldata|storage)",
          "captures": {
            "1": {
              "name": "entity.name.type.struct",
              "patterns": [
                {
                  "include": "#punctuation"
                },
                {
                  "match": "\\b(\\w+)\\b",
                  "name": "kek.struct"
                }
              ]
            },
            "2": {
              "name": "kek.struct.storage",
              "patterns": [
                {
                  "include": "#punctuation"
                },
                {
                  "include": "#kek-modifiers-storage"
                }
              ]
            }
          }
        },
        {
          "match": "((?<=\\s)(\\w+)(?=\\(\\{))",
          "name": "entity.name.type.struct",
          "captures": {
            "1": {
              "name": "kek.struct.new"
            }
          }
        },
        {
          "match": "(\\w+):\\s(\\w+)",
          "captures": {
            "1": {
              "name": "kek.struct.key"
            },
            "2": {
              "name": "kek.struct.value"
            }
          }
        }
      ]
    },
    "kek-entities": {
      "patterns": [
        {
          "match": "\\bLib[A-Z0-9]\\w*\\b",
          "name": "entity.name.type.library"
        },
        {
          "match": "\\b[A-Z0-9]\\w*Lib\\b",
          "name": "entity.name.type.library"
        },
        {
          "match": "\\bI[A-Z0-9]\\w*\\b",
          "name": "entity.name.type.interface"
        },
        {
          "match": "\\b[A-Z0-9]\\w*Interface\\b",
          "name": "entity.name.type.interface"
        },
        {
          "match": "\\b[A-Z0-9]\\w*\\b",
          "name": "entity.name.type"
        }
      ]
    }
  },
  "scopeName": "source.solidity",
  "uuid": "ad87d2cd-8575-4afe-984e-9421a3788933"
}
